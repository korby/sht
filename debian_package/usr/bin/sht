#!/bin/bash
path=$(pwd)
conf_file=$HOME/sht/sht
scripts_dir=$HOME/sht/scripts
terminal_allocation=""

while getopts acdehilsft opt; do
  # Make a boolean var for each given option
  if [ "$opt" != "?" ]; then 
    eval opt_"$opt"=1;
    if [ "$opt" == "f" ]; then 
      file_given=$(echo $@ |grep "\-f" |sed -E "s|(.*)-f[ =]([^ =]*)(.*)|\2|")
      ((option_total++))
    fi
  fi
  ((option_total++))
  case "$opt" in
  \?) exit 1 ;; # if option is illegal, we stop the process
  esac

done
shift $(($OPTIND - 1))

function help() {
  echo -e "\nUsage: $(basename "$0") [options] [local_path] shortcut [local_path|ssh_connection_chain]"
  echo -e "\nUse shortcut to make remote ssh connections."
  echo -e "\nExamples :"
  echo -e "\n$(basename "$0") -c my-server me@domain.tld"
  echo -e "Add a shorcut named 'my-server'. Then you can connect to me@domain.tld just typing $(basename "$0") my-server."
  echo -e "\n$(basename "$0") -i my-server"
  echo -e "Copy your id_rsa.pub to remote shortcut 'my-server'."
  echo -e "\n$(basename "$0") /path/to/file my-server:/path/to/file"
  echo -e "Copy local file /path/to/file to remote shortcut 'my-server' /path/to/file."
  echo -e "\n$(basename "$0") my-server:/path/to/file /path/to/file"
  echo -e "Copy remote shortcut 'my-server' file /path/to/file to local path /path/to/file."
  echo -e "\n$(basename "$0") -s my-server:/path/to/file /path/to/file"
  echo -e "The same than above but using sudo on the remote server."
  echo -e "\nOptions : "
  echo "  -c : Create a new shortcut"
  echo "  -d : Display the ssh_connection_chain set for a shortcut"
  echo "  -e : Edit the data file"
  echo "  -f /path/to/file : execute local file on remote shortcut"
  echo "  -h : Display help"
  echo "  -i : Copy identity file to remote shortcut"
  echo "  -l : List all shortcuts informations"
  echo "  -s : Use sudo on remote server for copying"
  echo "  -t : Allow remote server terminal allocation"
  echo -e "\nAdvanced usage : "
  echo "When you add a new shortcut you can give complex ssh chain, examples :"
  echo "$(basename "$0") -c my-shortcut-name -i /path/to/a/key/rsa  -p 8222 user@xx.xxx.xx.xxx"
  echo "$(basename "$0") -c my-shortcut-name -J user@xx.xxx.xx.xxx -i /path/to/a/key/rsa  -p 8222 user@xx.xxx.xx.xxx"
}

function get_remote_conn_chain() {
  id_conn=$1
  conf_line=$(cat $conf_file | grep $id_conn:)
  echo $conf_line | cut -d":" -f2-
}

function build_ssh_command() {
  conn_chain=$(get_remote_conn_chain $1)
  if [ "$conn_chain" == "" ]; then
    echo "No shortcut found."
    exit 1
  fi
  if [[ "${@:2}" != "" ]]; then
    ssh_command="ssh $terminal_allocation""$conn_chain \"${@:2}\""
  else
    ssh_command="ssh $terminal_allocation""$conn_chain"
  fi
  
}

function build_ssh_command_for_copy() {
  direction=$3
  server_alias=$(echo $1 | cut -d":" -f1)
  conn_chain=$(get_remote_conn_chain $server_alias)
  if [ "$conn_chain" == "" ]; then
    echo "No shortcut found."
    exit 1
  fi
  conn_chain=${1/$server_alias/$conn_chain}

  server_co=${conn_chain##* }
  ssh_args=${conn_chain/$server_co/}

  if [ "$direction" == "remote2local" ]; then
    rsync_command="rsync -rv --rsync-path='$remote_sudo""rsync' -e 'ssh $terminal_allocation""$ssh_args' $server_co $2"
    echo "$rsync_command"
  fi
  if [ "$direction" == "local2remote" ]; then
    rsync_command="rsync -rv --rsync-path='$remote_sudo""rsync' -e 'ssh $terminal_allocation""$ssh_args' $2 $server_co"
    echo "Do you want to execute that copy command :"
    echo "$rsync_command"
    read -p "Yes or no ? [N,y]" resp
    case "$resp" in [yY]) echo "Ok copying..." ;; *)
      echo "Do nothing..."
      exit 1
      ;;
    esac
  fi
  #echo $conn_chain
  #echo $server_co
  #echo $ssh_args
  #echo $rsync_command

  ssh_command=$rsync_command
}

function connect() {
  # if first argument is a path, action expected is a copy from remote to local
  if [[ "$1" =~ : ]]; then
    if [ "$2" == "" ]; then
      echo "Il manque le chemin de destination de la copie."
      exit 1
    fi
    build_ssh_command_for_copy $1 $2 "remote2local"
  fi
  # if second argument is a path, action expected is a copy from local to remote
  if [[ "$2" =~ : ]]; then
    build_ssh_command_for_copy $2 $1 "local2remote"
  fi
  if [ "$ssh_command" == "" ]; then
    build_ssh_command ${@:1}
  fi
  #echo  $ssh_command; exit 1
  eval $ssh_command

}

function create() {
  if test -z "$1"; then
    echo "first argument (shortcut's name) missing"
    exit 1
  fi
  if test -z "$2"; then
    echo "second argument (shortcut's connection chain) missing"
    exit 1
  fi
  if [[ "${@:2}" =~ "@" ]]; then
    if grep $1":" $conf_file >/dev/null; then
      echo "Shortcut $1 already exists"
      exit 1
    else
      echo $1":"${@:2} >>$conf_file
      echo $1" added to the shortcuts' file"
    fi
  else
    echo "second argument (shortcut's connection chain) is incorrect, missing @"
  fi

}

function copy_id() {
  ssh_command=$(get_remote_conn_chain $1)
  eval ssh-copy-id $ssh_command
}

function list() {
  cat $conf_file | sort -k1n,1n
}

function main() {
  if ((opt_e)); then vi ~/sht/sht; fi
  if ((opt_s)); then remote_sudo="sudo "; fi
  if ((opt_h)); then help; exit 0; fi
  if [ "$1" == "" ]; then
    list
    exit 1
  fi
  if ((opt_t)); then terminal_allocation="-t "; fi
  if ((opt_f)); then 
      connect $2 bash -s < $scripts_dir"/"$file_given ${@:2}
      #bash -s < test.sh
  fi
  if !((option_total)) || ((opt_t)) || ((opt_s)); then 
    connect ${@:1}; 
  fi
  if ((opt_c)); then create ${@:1}; fi
  if ((opt_d)); then
    build_ssh_command ${@:1}
    echo $ssh_command
  fi
  if ((opt_i)); then copy_id ${@:1}; fi
}

main ${@:1}
