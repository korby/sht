#!/bin/bash
path=`pwd`
confFile=$HOME/sht/sht
terminal_allocation=""

if [ ! -d "$HOME/sht/" ]; then mkdir $HOME/sht/; fi

function getRemoteConChain {
  idConn=$1
  confLine=`cat $confFile | grep $idConn:`;
  echo $confLine | cut -d":" -f2
}
function copyId {
  shCmd=`getRemoteConChain $1`
  ssh-copy-id $shCmd
}
function loadCmd {
  firstArg=$1
  secondArg=$2
  shCmd=`getRemoteConChain $firstArg`
  if [[ "$firstArg" =~ : ]];
  then
    copy="yes"
    serverAlias=$(echo $firstArg |cut -d":" -f1)
    shCmd=`getRemoteConChain $serverAlias`
    shCmd=${firstArg/$serverAlias/$shCmd}
    # invert -p string position
    shCmd=$(echo $shCmd | sed "s/\(.*\) \(-p .*\)\(:.*\)/\2 \1\3/" |sed "s/-p/-P/")
    shCmd=$shCmd" $secondArg"
  fi
  if [[ "$secondArg" =~ : ]];
  then
    copy="yes"
    serverAlias=$(echo $secondArg |cut -d":" -f1)
    shCmd=`getRemoteConChain $serverAlias`
    shCmd=${secondArg/$serverAlias/$shCmd}
    # invert -p string position
    shCmd=$(echo $shCmd | sed "s/\(.*\) \(-p .*\)\(:.*\)/\2 \1\3/" |sed "s/-p/-P/")
    shCmd="$firstArg "$shCmd
  fi
  if [ "$copy" == "yes" ];
  then
    #shCmd is formatted for scp syntax
    # now format for rsync : rsync "ssh -i"...
    shCmd=$(echo $shCmd | sed "s/-i \([^ ]*\)\( .*\)/-e 'ssh -i \1'\2/")
    read -p "Want to execute : rsync -rv $shCmd ? [N,y]" resp
    case "$resp" in [yY]) echo "Ok copying...";; *) echo "Do nothing..."; exit 1;; esac
    read -p "Want to copy via remote sudo [N,y]" resp
    case "$resp" in [yY]) eval "rsync -rv --rsync-path='sudo rsync' $shCmd";; *) eval "rsync -rv $shCmd";; esac
    #rsync -rv --rsync-path="sudo rsync" $shCmd
    #scp -r $shCmd
    
  else
    ssh $shCmd ${@:2};
  fi
  
}
function execCmd {
  shCmd=`getRemoteConChain $1`
  ssh $terminal_allocation$shCmd "${@:3}"
}
function addCmd {
    if test -z "$1"
        then
             echo "first argument (shortcut's name) missing";
             exit 1;
    fi
    if test -z "$2"
        then
             echo "second argument (shortcut's command) missing";
             exit 1;
        else
             if [[ "$2" =~ "@" ]] ; then
                 if grep $1":" $confFile > /dev/null
                    then
                    echo "Shortcut $1 already exists";
                    exit 1;
                 else
                    echo $1":"$2" "$3" "$4 >> $confFile;
                    echo $1" added to the shortcuts' file";
                 fi
             else
                 echo "second argument (shortcut's command) is incorrect";
             fi
    fi

}
function displayCmd {
  cat $confFile | grep $1;
}

while getopts clhfidet: opt
do
    case "$opt" in
      t)  terminal_allocation="-t "; execCmd $2 ${@:2}; exit 1; ;;
      l)  cat $confFile | sort -k1n,1n; exit 1; ;;
      c)  addCmd $2 $3 $4 $5; exit 1; ;;
      e)  execCmd $2 ${@:2}; exit 1; ;;
      i)  copyId $2; loadCmd $2; exit 1; ;;
      d)  displayCmd $2; exit 1; ;;
      h)  echo "usage: -h | -c | -l | -i |Â -d" ;
          echo "usage: $0 [shortcut to launch] : before you have to fill/create you shortcuts file here: "$confFile" With this syntax for each line : shortcutsName:sshuser@sshhost" ;
          echo "usage: $0 -d [term to search] : display shortcuts matching with term" ;
          echo "usage: $0 -c [name] [user@host] : add the shortcut in the shortcuts' file" ;
          echo "usage: $0 -i [shortcut to launch] : launch the shortcut and ssh copy id" ;
          echo "usage: $0 -e [shortcut to launch] [bash command] : execute bash command on remote host" ;
          echo " -h : print help" ;
          exit 1; ;;
      \?)   # unknown flag
          echo >&2 \
    "usage: $0 shortcut to launch, before you have to fill/create you shortcuts file here: "$confFile" With this syntax for each line : shortcutsName:sshuser@sshhost"
    exit 1;;
    esac
done

if test -z "$*"
then
     cat $confFile | sort -k1n,1n;
else
     loadCmd $1 ${@:2}
fi
